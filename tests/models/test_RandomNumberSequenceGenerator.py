import pytest
from unittest.mock import MagicMock
from models.RandomNumberSequenceGenerator import RandomNumberSequenceGenerator

from fixtures import rng_generator


def test_generate_and_return_sequence(rng_generator):
    rng_generator.rng.get_random_number.side_effect = [1, 2, 3, 4, 5]
    result = rng_generator.generate_and_return_sequence(1, 5, 5)
    assert result == [1, 2, 3, 4, 5]


def test_generate_and_return_sequence_invalid_input(rng_generator):
    with pytest.raises(Exception):
        rng_generator.generate_and_return_sequence(1, 5, 10)


def test_generate_and_return_sequence_empty_range(rng_generator):
    with pytest.raises(Exception):
        rng_generator.generate_and_return_sequence(10, 10, 5)


def test_generate_and_return_sequence_empty_length(rng_generator):

    result = rng_generator.generate_and_return_sequence(10, 10, 0)
    assert result == []


def test_generate_and_return_sequence_no_duplicates(rng_generator):
    rng_generator.rng.get_random_number.side_effect = [1, 1, 1, 1, 1, 2, 3, 4, 5]
    with pytest.raises(Exception):
        rng_generator.generate_and_return_sequence(1, 5, 5)


def test_generate_and_return_sequence_large_range(rng_generator):
    rng_generator.rng.get_random_number.side_effect = [1000, 2000, 3000, 4000, 5000]
    result = rng_generator.generate_and_return_sequence(1000, 5000, 5)
    # The order of the numbers depends on the random number generated by the PRNG method get_random_number
    # and is therefore not deterministic
    assert result == [4000, 1000, 5000, 2000, 3000]


def test_generate_and_return_sequence_invalid_length(rng_generator):
    with pytest.raises(Exception):
        rng_generator.generate_and_return_sequence(1, 5, 10)
